load("@bazel_skylib//lib:dicts.bzl", "dicts")
load("@rules_python//python:defs.bzl", "py_binary")

OPENSSL_DATA = [
    "@external",
    "Configure",
    "config",
] + glob(
    [
        "**/*.pm",
        "**/*.dat",
        "Configurations/*",
        "util/**/*",
        "**/build.info",
        "**/*.in",
        "**/*.h",
        "**/*.c",
        "**/*.S",
        "**/*.pl",
        "**/*.inc",
        "**/*.asn1",
    ],
    exclude = [
        "**/test-runs/**/*",
        # We need these for Windows so it doesn't find a bunch of invalid files
        "**/jdk/**/*",
        "**/install/**/*",
        "**/bazel-*/**/*",
    ],
)

OPENSSL_ENV = {
    "PERL5LIB": "external/external~/perl/Text-Template-1.56/lib",
}

py_binary(
    name = "make_openssl",
    srcs = ["run.py"],
    data = OPENSSL_DATA + select({
        "@platforms//os:windows": ["@nasm"],
        "//conditions:default": [],
    }),
    env = OPENSSL_ENV,
    main = "run.py",
)

cc_library(
    name = "ssl",
    srcs = select({
        "@platforms//os:windows": ["libssl.lib"],
        "//conditions:default": ["libssl.a"],
    }),
    # We need these for Windows so it doesn't find a bunch of invalid files
    hdrs = glob(
        ["**/include/**/*.h"],
        exclude = [
            "**/jdk/**/*",
            "**/install/**/*",
            "**/bazel-*/**/*",
        ],
    ),
    data = [":make_openssl"],
    includes = ["include"],
)

cc_library(
    name = "crypto",
    srcs = select({
        "@platforms//os:windows": ["libcrypto.lib"],
        "//conditions:default": ["libcrypto.a"],
    }),
    # We need this for Windows so it doesn't find a bunch of invalid files
    hdrs = glob(
        ["**/include/**/*.h"],
        exclude = [
            "**/jdk/**/*",
            "**/install/**/*",
            "**/bazel-*/**/*",
        ],
    ),
    data = [":make_openssl"],
    includes = ["include"],
)

py_binary(
    name = "openssl_tests",
    srcs = ["run.py"],
    # is_test
    args = ["True"],
    data = OPENSSL_DATA + glob(
        [
            "test/recipes/**/*",
            "**/*.pem",
            "**/*.cnf",
            "**/*.csr",
            "**/*.crt",
            "**/*.csm",
            "**/*.ors",
            "**/*.pfx",
            "**/*.utf8",
            "**/*.key",
            "**/*.der",
            "**/*.default",
            "**/*.bin",
            "**/*.p12",
            "**/*.sct",
            "**/*.cms",
            "**/*.txt",
            "**/*.msb",
            "**/*.tmpl",
        ],
        exclude = [
            "test/recipes/**/*.in",
            "test/recipes/**/*.pl",
            "**/test-runs/**/*",
            "util/**/*.txt",
            "Configurations/**/*",
            # We need these because of it finding invalid Windows files
            "**/install/**/*",
            "**/server/**/*",
            "**/bazel-*/**/*",
        ],
    ) + select({
        "@platforms//os:windows": ["@nasm"],
        "//conditions:default": [],
    }),
    env = select({
        "@platforms//os:windows":
        # The Zi flag must be set otherwise OpenSSL fails to build due to missing .pdb files
        dicts.add(
            {"CFLAGS": "-Zi"},
            OPENSSL_ENV,
        ),
        "//conditions:default": OPENSSL_ENV,
    }),
    main = "run.py",
)
